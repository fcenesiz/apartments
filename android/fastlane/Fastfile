default_platform(:android)

ENV_PATH = "../assets/app/.env"
ANDROID_VERSION_NAME = "androidVersionName"
APP_BUNDLE_PATH = "../build/app/outputs/bundle/release/app-release.aab" 
INTERNAL = "internal"

platform :android do
  desc "Runs all the tests"
  lane :test do
    gradle(task: "test")
  end

  desc "Deploy a new version to the Google Play"
  lane :internal do |options|

    # internal versiyonunun son sürümünü al
    versionCodes = google_play_track_version_codes(track:INTERNAL)
    versionNumber = (versionCodes.length > 0 ? versionCodes[0] : 0).to_i
   
    # versiyonu 1 artır
    versionNumber += 1
    incrementVersion version: options[:version]
    
    # versiyonu set et
    setVersionNumber versionNumber: options[:versionNumber]
    versionName = getVersionName()
   
    # build et
    flutter_build(versionName, versionNumber)

    # markete at
    build_store(INTERNAL)

  end

  private_lane :setVersionNumber do |options|
    if options[:versionNumber] != nil
      set_properties_value(
        key: ANDROID_VERSION_NAME,
        path: ENV_PATH,
        value: options[:versionNumber]
      )
    end
  end

  private_lane :incrementVersion do |options|
    if options[:version] != nil
      increment_version_name_in_properties_file(
        key: ANDROID_VERSION_NAME,
        path: ENV_PATH,
        update_type: options[:version]
      )
    end
  end

  def getVersionName
    return get_properties_value(
      key: ANDROID_VERSION_NAME,
      path: ENV_PATH
    )
  end

  def flutter_build(versionName, number)
    Dir.chdir '../../' do
      sh('flutter', 'packages', 'get')
      sh('flutter', 'clean')
      sh(
        "flutter build appbundle --build-name=#{
          versionName
        } --build-number=#{number.to_s}"
      )
    end
  end

  def build_store(track)
    upload_to_play_store(
      track: track,
      timeout: 600,
      aab: APP_BUNDLE_PATH
    )
  end

end
